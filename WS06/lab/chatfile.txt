#include "TextFile.h"
using namespace std;
namespace sdds {
    Line::operator const char* () const {
        return (const char*)m_value;
    }

    Line& Line::operator=(const char* lineContent) {
        delete[] m_value;
        m_value = new char[strLen(lineContent) + 1];
        strCpy(m_value, lineContent);
        return *this;
    }

    Line::~Line() {
        delete[] m_value;
    }

    TextFile::TextFile(unsigned pageSize) : m_textLines(nullptr), m_filename(nullptr), m_noOfLines(0), m_pageSize(pageSize) {
    }

    TextFile::TextFile(const char* filename, unsigned pageSize) : m_textLines(nullptr), m_filename(nullptr), m_noOfLines(0), m_pageSize(pageSize) {
        setFilename(filename);
        setNoOfLines();
        loadText();
    }

    TextFile::TextFile(const TextFile& other) : m_textLines(nullptr), m_filename(nullptr), m_noOfLines(0), m_pageSize(other.m_pageSize) {
        if (other.m_filename != nullptr) {
            setFilename(other.m_filename, true);
            saveAs(m_filename);
            setNoOfLines();
            loadText();
        }
    }

    TextFile& TextFile::operator=(const TextFile& other) {
        if (this != &other) {
            delete[] m_textLines;
            m_textLines = nullptr;
            delete[] m_filename;
            m_filename = nullptr;
            m_pageSize = other.m_pageSize;
            if (other.m_filename != nullptr) {
                setFilename(other.m_filename, true);
                saveAs(m_filename);
                setNoOfLines();
                loadText();
            }
        }
        return *this;
    }

    TextFile::~TextFile() {
        delete[] m_textLines;
        m_textLines = nullptr;
        delete[] m_filename;
        m_filename = nullptr;
    }

    std::ostream& TextFile::view(std::ostream& ostr) const {
        if (m_filename != nullptr) {
            ostr << m_filename << endl;
            for (unsigned i = 0; i < m_noOfLines; i++) {
                ostr << (i + 1) << ": " << m_textLines[i] << endl;
                if ((i + 1) % m_pageSize == 0) {
                    ostr << "Hit ENTER to continue...";
                    ostr.get();
                }
            }
        }
        return ostr;
    }

    std::istream& TextFile::getFile(std::istream& istr) {
        string filename;
        istr >> filename;
        setFilename(filename.c_str());
        setNoOfLines();
        loadText();
        return istr;
    }

    unsigned TextFile::lines() const {
        return m_noOfLines;
    }

    const char* TextFile::name() const {
        return m_filename;
    }

    const char* TextFile::operator[](unsigned index) const {
        if (m_filename == nullptr || m_noOfLines == 0)
            return nullptr;
        return m_textLines[index % m_noOfLines];
    }

    TextFile::operator bool() const {
        return (m_filename != nullptr);
    }

    void TextFile::setFilename(const char* fname, bool isCopy) {
        delete[] m_filename;
        m_filename = new char[strLen(fname) + (isCopy ? 3 : 1)];
        if (isCopy)
            strCpy(m_filename, "C_");
        strCat(m_filename, fname);
    }

    void TextFile::setNoOfLines() {
        ifstream file(m_filename);
        char ch;
        m_noOfLines = 0;
        while (file.get(ch)) {
            if (ch == '\n')
                m_noOfLines++;
        }
        m_noOfLines++;
        if (m_noOfLines == 0) {
            delete[] m_filename;
            m_filename = nullptr;
        }
    }

    void TextFile::loadText() {
        if (m_filename != nullptr) {
            delete[] m_textLines;
            m_textLines = new Line[m_noOfLines];
            ifstream file(m_filename);
            for (unsigned i = 0; i < m_noOfLines; i++) {
                string line;
                getline(file, line);
                m_textLines[i] = line.c_str();
            }
        }
    }

    void TextFile::saveAs(const char* fileName) const {
        ofstream file(fileName);
        for (unsigned i = 0; i < m_noOfLines; i++)
            file << m_textLines[i] << '\n';
    }

    void TextFile::setEmpty() {
        delete[] m_textLines;
        m_textLines = nullptr;
        delete[] m_filename;
        m_filename = nullptr;
        m_noOfLines = 0;
    }

    ostream& operator<<(ostream& ostr, const TextFile& text) {
        return text.view(ostr);
    }

    istream& operator>>(istream& istr, TextFile& text) {
        return text.getFile(istr);
    }
}